/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tree;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class App<T> {


  public static void main(String[] args) {
    // this will run Binary Tree test for `$gradle run`
//    binaryTree();
    // this will run Binary Search Tree test for `$gradle run`
//    binarySearchTree();
    KTree<Integer> kTree = new KTree<>();
    KNode<Integer> root = new KNode<>(5);
    kTree.setRoot(root);
    for (int i = 12; i < 25; i++) {
      KNode<Integer> temp = new KNode<>(i);
      KNode<Integer> childOfTemp = new KNode<>(i * 2);
      temp.addChild(childOfTemp);
      childOfTemp = new KNode<>(i * 4);
      temp.addChild(childOfTemp);
      root.addChild(temp);
    }
    System.out.println(kTree.getRoot());
    System.out.println(fizzBuzzTree(kTree).getRoot());
  }

  public ArrayList<T> breadthFirst(BinaryTree<T> tree) {
    Queue<Node<T>> queue = new LinkedList<>();
    ArrayList<T> out = new ArrayList<>();
    queue.add(tree.getRoot());
    while (!queue.isEmpty()) {
      Node<T> front = queue.remove();
      out.add(front.getValue());
      if (front.getLeftChild() != null) queue.add(front.getLeftChild());
      if (front.getRightChild() != null) queue.add(front.getRightChild());
    }
    return out;
  }


  public static KTree<String> fizzBuzzTree(KTree<Integer> kTree) {
    Queue<KNode<Integer>> queue = new LinkedList<>();
    KTree<String> out = new KTree<>();
    queue.add(kTree.getRoot());
    KNode<String> kNode = new KNode<>(fizzBuzzCondition(queue.peek().getValue()));
    out.setRoot(kNode);
    while (!queue.isEmpty()) {
      KNode<Integer> front = queue.remove();
      kNode.addChild(new KNode<>(fizzBuzzCondition(front.getValue())));
      queue.addAll(front.getChildren());
    }
    return out;
  }

  public static String fizzBuzzCondition(int value) {
    if (value % 5 == 0 && value % 3 == 0) return "FizzBuzz";
    else if (value % 5 == 0) return "Buzz";
    else if (value % 3 == 0) return "Fizz";
    return String.valueOf(value);
  }


  public static void binaryTree() {
    BinaryTree<String> binaryTree = new BinaryTree<>();
    Node<String> root = new Node<>("Root");
    binaryTree.setRoot(root);
    Node<String> leftRoot = new Node<>("Left");
    Node<String> rightRoot = new Node<>("Right");
    root.setLeftChild(leftRoot);
    root.setRightChild(rightRoot);
    Node<String> leftLeftLeaf = new Node<>("Left Left Leaf");
    Node<String> rightLeftLeaf = new Node<>("Right Left Leaf");
    leftRoot.setLeftChild(leftLeftLeaf);
    leftRoot.setRightChild(rightLeftLeaf);
    Node<String> leftRightLeaf = new Node<>("Left Right Leaf");
    Node<String> rightRightLeaf = new Node<>("Right Right Leaf");
    rightRoot.setRightChild(rightRightLeaf);
    rightRoot.setLeftChild(leftRightLeaf);
    /*                      My Tree
     *                        Root
     *                      /       \
     *                  Left         Right
     *                /   \         /     \
     *       leftLeaf  rightLeaf leftLeaf  rightLeaf
     */
    System.out.println("The Binary Tree Look like this now =>> \n" + binaryTree.toString());
    System.out.println("Pre Order Tree List  =>>  " + binaryTree.preOrder(root));
    System.out.println("In Order Tree List =>>  " + binaryTree.inOrder(root));
    System.out.println("Post Order Tree List =>>  " + binaryTree.postOrder(root));
//    For the breadth First Method.
    System.out.println("Now Let's see in Breadth First Order =>> \n" + new App<String>().breadthFirst(binaryTree));
  }

  public static void binarySearchTree() {
    BinarySearchTree<Integer> binarySearchTree = new BinarySearchTree<>();
    binarySearchTree.add(15);
    binarySearchTree.add(7);
    binarySearchTree.add(10);
    binarySearchTree.add(20);
    binarySearchTree.add(25);
    binarySearchTree.add(21);
    binarySearchTree.add(3);
    binarySearchTree.add(6);
    System.out.println("Now let's Define a Binary Search Tree (BST) and add some value to it =>> ");
    System.out.println(binarySearchTree.toString());
    System.out.println("Now let's see the BST in pre order format =>> " + binarySearchTree.preOrder(binarySearchTree.getRoot()));
    System.out.println("Let's see if the BST contains number 10 =>>" + binarySearchTree.contains(10));
    System.out.println("Let's see if the BST contains number 17 =>>" + binarySearchTree.contains(17));
    System.out.println("And if we try to add duplicate value it will give you an error \n");
    binarySearchTree.add(20);
    System.out.println("Let's see the maximum number for this tree => " + binarySearchTree.findMaximumValue().intValue());
    System.out.println("Now Let's see in Breadth First Order =>> \n" + new App<Integer>().breadthFirst(binarySearchTree));


  }
}
